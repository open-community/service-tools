{"version":3,"sources":["api/api.spec.js"],"names":["describe","it","result","assert","isArray","isEmpty","list","generateId","generateFakeId","equal","length","include","fakeId","invalidType","ResourceType","ACCOUNT","validType","TEXT","validTypes","IDENTITY","apiId","isNull","validResourceType","invalidResourceType","resourceType","resourceId","faker","random","uuid","resourceTypes","apiIdAccount","apiIdIdentity","arrayElement","Object","values","resourcetype","isFalse","encode","base64url","parse","id","type","isString","match","BASE64_REGEXP","code","lorem","word","message","sentences","parameter","value","x","queryParameterError","deepEqual","notStrictEqual"],"mappings":"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","sourcesContent":["/* eslint-env node, mocha */\n\n// ============================================================\n// Import packages\nimport { assert } from 'chai';\nimport faker from 'faker';\nimport base64url from 'base64url';\n\n// ============================================================\n// Import modules\nimport {\n    ResourceType,\n} from '../constants';\n\nimport {\n    getInvalidApiIdList,\n    getResourceId,\n    getResourceType,\n    isValidApiId,\n    parsePublicId,\n    toApiId,\n    toQueryParameterError,\n} from './api';\n\n// ============================================================\n// Tests\n\ndescribe('getInvalidApiIdList', () => {\n    it('should return empty list if initial list is empty', () => {\n        const result = getInvalidApiIdList([]);\n        assert.isArray(result);\n        assert.isEmpty(result);\n    });\n\n    it('should empty list if no invalid ID', () => {\n        let list;\n        let result;\n\n        // ===============\n        // 1 element\n        list = [\n            generateId(),\n        ];\n\n        result = getInvalidApiIdList(list);\n\n        assert.isArray(result);\n        assert.isEmpty(result);\n\n        // ===============\n        // 3 element\n        list = [\n            generateId(),\n            generateId(),\n            generateId(),\n        ];\n\n        result = getInvalidApiIdList(list);\n\n        assert.isArray(result);\n        assert.isEmpty(result);\n    });\n\n    it('should non-empty list if invalid ID', () => {\n        let list;\n        let result;\n\n        // ===============\n        // 1 element, 1 fake\n        list = [\n            generateFakeId(),\n        ];\n\n        result = getInvalidApiIdList(list);\n\n        assert.isArray(result);\n        assert.equal(result.length, 1);\n        assert.include(result, list[0]);\n\n        // ===============\n        // 2 element, 1 fake\n        list = [\n            generateFakeId(),\n            generateId(),\n        ];\n\n        result = getInvalidApiIdList(list);\n\n        assert.isArray(result);\n        assert.equal(result.length, 1);\n        assert.include(result, list[0]);\n\n        // ===============\n        // 2 element, 1 fake\n        list = [\n            generateFakeId(),\n            generateId(),\n            generateFakeId(),\n        ];\n\n        result = getInvalidApiIdList(list);\n\n        assert.isArray(result);\n        assert.equal(result.length, 2);\n        assert.include(result, list[0]);\n        assert.include(result, list[2]);\n    });\n\n    it('should return unique elements', () => {\n        const fakeId = generateFakeId();\n\n        const list = [\n            fakeId,\n            generateId(),\n            fakeId,\n        ];\n\n        const result = getInvalidApiIdList(list);\n\n        assert.isArray(result);\n        assert.equal(result.length, 1);\n        assert.include(result, fakeId);\n    });\n\n    it('should return ID that doesn\\'t match resource type', () => {\n        const invalidType = ResourceType.ACCOUNT;\n        const validType = ResourceType.TEXT;\n\n        const list = [\n            generateId(invalidType),\n            generateId(invalidType),\n            generateId(validType),\n        ];\n\n        const result = getInvalidApiIdList(list, validType);\n\n        assert.isArray(result);\n        assert.equal(result.length, 2);\n        assert.include(result, list[0]);\n        assert.include(result, list[1]);\n    });\n\n    it('should return ID that doesn\\'t match one of resource', () => {\n        const invalidType = ResourceType.ACCOUNT;\n        const validTypes = [ResourceType.TEXT, ResourceType.IDENTITY];\n\n        const list = [\n            generateId(invalidType),\n            generateId(invalidType),\n            generateId(validTypes[0]),\n            generateId(validTypes[0]),\n            generateId(validTypes[1]),\n            generateId(validTypes[1]),\n        ];\n\n        const result = getInvalidApiIdList(list, validTypes);\n\n        assert.isArray(result);\n        assert.equal(result.length, 2);\n        assert.include(result, list[0]);\n        assert.include(result, list[1]);\n    });\n});\n\ndescribe('getResourceId', () => {\n    it('return null if invalid apiId', () => {\n        const apiId = generateFakeId();\n        assert.isNull(getResourceId(apiId));\n    });\n\n    it('return null if invalid resource type', () => {\n        const validResourceType = ResourceType.ACCOUNT;\n        const invalidResourceType = ResourceType.TEXT;\n\n        const apiId = generateId(invalidResourceType);\n\n        assert.isNull(getResourceId(apiId, validResourceType));\n    });\n\n    it('return null if invalid resource type', () => {\n        const validResourceType = [ResourceType.ACCOUNT, ResourceType.IDENTITY];\n        const invalidResourceType = ResourceType.TEXT;\n\n        const apiId = generateId(invalidResourceType);\n\n        assert.isNull(getResourceId(apiId, validResourceType));\n    });\n\n    it('return ID if valid resource type', () => {\n        const resourceType = ResourceType.ACCOUNT;\n        const resourceId = faker.random.uuid();\n\n        const apiId = toApiId(resourceType, resourceId);\n\n        assert.equal(getResourceId(apiId, resourceType), resourceId);\n    });\n\n    it('return ID if type is in list', () => {\n        const resourceTypes = [ResourceType.ACCOUNT, ResourceType.IDENTITY];\n        const resourceId = faker.random.uuid();\n\n        const apiIdAccount = toApiId(resourceTypes[0], resourceId);\n        const apiIdIdentity = toApiId(resourceTypes[1], resourceId);\n\n        assert.equal(getResourceId(apiIdAccount, resourceTypes), resourceId);\n        assert.equal(getResourceId(apiIdIdentity, resourceTypes), resourceId);\n    });\n\n    it('return ID if no resource type', () => {\n        const resourceId = faker.random.uuid();\n\n        const apiId = toApiId(\n            faker.random.arrayElement(Object.values(ResourceType)),\n            resourceId,\n        );\n\n        assert.equal(getResourceId(apiId), resourceId);\n    });\n});\n\ndescribe('getResourceType', () => {\n    it('return null if invalid apiId', () => {\n        const fakeId = generateFakeId();\n\n        assert.isNull(getResourceType(fakeId));\n    });\n\n    it('return the type of the resource', () => {\n        const resourcetype = ResourceType.IDENTITY;\n        const apiId = generateId(resourcetype);\n\n        assert.equal(getResourceType(apiId), resourcetype);\n    });\n});\n\ndescribe('isValidApiId', () => {\n    it('return false if type is invalid', () => {\n        assert.isFalse(isValidApiId());\n        assert.isFalse(isValidApiId([]));\n        assert.isFalse(isValidApiId({}));\n        assert.isFalse(isValidApiId(1));\n    });\n\n    it('return false if resource type is invalid', () => {\n\n    });\n});\n\ndescribe('parsePublicId', () => {\n    it('should return null if not a valid apiID', () => {\n        assert.isNull(parsePublicId());\n        assert.isNull(parsePublicId([]));\n        assert.isNull(parsePublicId(0));\n        assert.isNull(parsePublicId(''));\n        assert.isNull(parsePublicId('12457'));\n\n        const encode = base64url.encode('1123456');\n\n        assert.isNull(parsePublicId(encode));\n    });\n\n    it('should return the type and ID', () => {\n        const resourceType = ResourceType.TEXT;\n        const resourceId = faker.random.uuid();\n\n        const apiId = toApiId(resourceType, resourceId);\n\n        const parse = parsePublicId(apiId);\n\n        assert.equal(parse.id, resourceId);\n        assert.equal(parse.type, resourceType);\n    });\n});\n\ndescribe('toApiId', () => {\n    it('Should return a string', () => {\n        const resourceId = faker.random.uuid();\n        const resourceType = ResourceType.IDENTITY;\n\n        const apiId = toApiId(resourceType, resourceId);\n\n        assert.isString(apiId, 'return a string');\n\n        assert.match(apiId, BASE64_REGEXP);\n\n        const parse = parsePublicId(apiId);\n\n        assert.equal(parse.id, resourceId);\n        assert.equal(parse.type, resourceType);\n    });\n});\n\ndescribe('toQueryParameterError', () => {\n    it('Should return a QueryParameterError object', () => {\n        const code = faker.lorem.word(1);\n        const message = faker.lorem.sentences(2);\n        const parameter = faker.lorem.word(1);\n        const value = {\n            x: faker.lorem.word(1),\n        };\n\n        const queryParameterError = toQueryParameterError({\n            code,\n            message,\n            parameter,\n            value,\n        });\n\n        assert.equal(queryParameterError.code, code);\n        assert.equal(queryParameterError.message, message);\n        assert.equal(queryParameterError.parameter, parameter);\n        assert.deepEqual(queryParameterError.value, value);\n        assert.notStrictEqual(queryParameterError.value, value);\n    });\n});\n\n// ============================================================\n// Helpers\n\nfunction generateId(type) {\n    let resourceType = type;\n\n    if (!resourceType) {\n        resourceType = faker.random.arrayElement(Object.values(ResourceType));\n    }\n\n    const id = faker.random.uuid();\n\n    return toApiId(resourceType, id);\n}\n\nfunction generateFakeId() {\n    return faker.random.uuid();\n}\n"],"file":"api.spec.js"}