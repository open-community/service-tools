{"version":3,"sources":["api/api.js"],"names":["API_ID_REGEXP","getInvalidApiIdList","list","resourceType","invalidList","filter","apiID","isValidApiId","_","uniq","getResourceId","apiId","parse","parsePublicId","type","Array","isArray","includes","id","getResourceType","Boolean","decoded","base64url","decode","match","toApiId","resourceId","encode","toQueryParameterError","code","message","parameter","value","cloneDeep"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;;;AAHA;AACA;AAIA;AACA;AACA,IAAMA,aAAa,GAAG,sCAAtB,C,CAEA;AACA;;AAEA;;;;;AAKA;;;;;;;;;AAQA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,YAAnC,EAAiD;AAC7C,MAAMC,WAAW,GAAGF,IAAI,CAACG,MAAL,CAAY,UAAAC,KAAK;AAAA,WAAI,CAACC,YAAY,CAACD,KAAD,EAAQH,YAAR,CAAjB;AAAA,GAAjB,CAApB;AACA,SAAOK,mBAAEC,IAAF,CAAOL,WAAP,CAAP;AACH;AAED;;;;;;;;;;;AASA,SAASM,aAAT,CAAuBC,KAAvB,EAA8BR,YAA9B,EAA4C;AACxC,MAAMS,KAAK,GAAGC,aAAa,CAACF,KAAD,CAA3B;;AAEA,MAAI,CAACC,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AAED,MAAI,OAAOT,YAAP,KAAwB,QAA5B,EAAsC;AAClC,QAAIS,KAAK,CAACE,IAAN,KAAeX,YAAnB,EAAiC;AAC7B,aAAO,IAAP;AACH;AACJ,GAJD,MAKK,IAAIY,KAAK,CAACC,OAAN,CAAcb,YAAd,CAAJ,EAAiC;AAClC,QAAI,CAACA,YAAY,CAACc,QAAb,CAAsBL,KAAK,CAACE,IAA5B,CAAL,EAAwC;AACpC,aAAO,IAAP;AACH;AACJ;;AAED,SAAOF,KAAK,CAACM,EAAb;AACH;AAED;;;;;;;;;AAOA,SAASC,eAAT,CAAyBR,KAAzB,EAAgC;AAC5B,MAAMC,KAAK,GAAGC,aAAa,CAACF,KAAD,CAA3B;;AAEA,MAAI,CAACC,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AAED,SAAOA,KAAK,CAACE,IAAb;AACH;AAED;;;;;;;;;;AAQA,SAASP,YAAT,CAAsBI,KAAtB,EAA6BR,YAA7B,EAA2C;AACvC,MAAMe,EAAE,GAAGR,aAAa,CAACC,KAAD,EAAQR,YAAR,CAAxB;;AAEA,MAAI,CAACe,EAAL,EAAS;AACL,WAAO,KAAP;AACH;;AAED,SAAOE,OAAO,CAACF,EAAD,CAAd;AACH;AAED;;;;;;;;;AAOA,SAASL,aAAT,CAAuBF,KAAvB,EAA8B;AAC1B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAO,IAAP;AACH;;AAED,MAAMU,OAAO,GAAGC,sBAAUC,MAAV,CAAiBZ,KAAjB,CAAhB;;AAEA,MAAMa,KAAK,GAAGH,OAAO,CAACG,KAAR,CAAcxB,aAAd,CAAd;;AAEA,MAAI,CAACwB,KAAL,EAAY;AACR,WAAO,IAAP;AACH;;AAED,SAAO;AACHV,IAAAA,IAAI,EAAEU,KAAK,CAAC,CAAD,CADR;AAEHN,IAAAA,EAAE,EAAEM,KAAK,CAAC,CAAD;AAFN,GAAP;AAIH;AAED;;;;;;;;;AAOA,SAASC,OAAT,CAAiBtB,YAAjB,EAA+BuB,UAA/B,EAA2C;AACvC,SAAOJ,sBAAUK,MAAV,WAAoBxB,YAApB,cAAoCuB,UAApC,EAAP;AACH;AAED;;;;;;;;;;AAQA,SAASE,qBAAT,OAKG;AAAA,MAJCC,IAID,QAJCA,IAID;AAAA,MAHCC,OAGD,QAHCA,OAGD;AAAA,MAFCC,SAED,QAFCA,SAED;AAAA,MADCC,KACD,QADCA,KACD;AACC,SAAO;AACHH,IAAAA,IAAI,EAAJA,IADG;AAEHC,IAAAA,OAAO,EAAPA,OAFG;AAGHC,IAAAA,SAAS,EAATA,SAHG;AAIHC,IAAAA,KAAK,EAAExB,mBAAEyB,SAAF,CAAYD,KAAZ;AAJJ,GAAP;AAMH,C,CAED;AACA","sourcesContent":["// ============================================================\n// Import packages\nimport base64url from 'base64url';\nimport _ from 'lodash';\n\n// ============================================================\n// Module's constants and variables\nconst API_ID_REGEXP = /^([a-zA-Z0-9-_:]+):([a-zA-Z0-9-_]+)$/;\n\n// ============================================================\n// Functions\n\n/**\n * API Helpers.\n * @namespace api\n */\n\n/**\n * Filter a list of string and return all elements that are not valid Api ID.\n * @param {ApiId[]}                     list           - List of ID to validate\n * @param {ResourceType|ResourceType[]} [resourceType] - Resource type allowed\n * @returns {string[]}\n * @memberOf api\n * @public\n */\nfunction getInvalidApiIdList(list, resourceType) {\n    const invalidList = list.filter(apiID => !isValidApiId(apiID, resourceType));\n    return _.uniq(invalidList);\n}\n\n/**\n * Return the resource id corresponding to the given api ID.\n * If the ID is not a valid apiId or resource doesn't match the expected type, then return null.\n * @param {ApiId}                       apiId\n * @param {ResourceType|ResourceType[]} [resourceType]\n * @returns {?ResourceId}\n * @memberOf api\n * @public\n */\nfunction getResourceId(apiId, resourceType) {\n    const parse = parsePublicId(apiId);\n\n    if (!parse) {\n        return null;\n    }\n\n    if (typeof resourceType === 'string') {\n        if (parse.type !== resourceType) {\n            return null;\n        }\n    }\n    else if (Array.isArray(resourceType)) {\n        if (!resourceType.includes(parse.type)) {\n            return null;\n        }\n    }\n\n    return parse.id;\n}\n\n/**\n * Return the resource type of the given api id.\n * If invalid api ID, return null\n * @param {ApiId} apiId\n * @returns {?ResourceType}\n * @public\n */\nfunction getResourceType(apiId) {\n    const parse = parsePublicId(apiId);\n\n    if (!parse) {\n        return null;\n    }\n\n    return parse.type;\n}\n\n/**\n * Check that the given API id is valid.\n * @param {ApiId}                       apiId\n * @param {ResourceType|ResourceType[]} [resourceType] - Type of resource\n * @returns {boolean}\n * @memberOf api\n * @public\n */\nfunction isValidApiId(apiId, resourceType) {\n    const id = getResourceId(apiId, resourceType);\n\n    if (!id) {\n        return false;\n    }\n\n    return Boolean(id);\n}\n\n/**\n * Parse a public ID and return it's type and real id\n * @param {ApiId} apiId\n * @returns {?{id: ResourceId, type: ResourceType}}\n * @memberOf api\n * @public\n */\nfunction parsePublicId(apiId) {\n    if (typeof apiId !== 'string') {\n        return null;\n    }\n\n    const decoded = base64url.decode(apiId);\n\n    const match = decoded.match(API_ID_REGEXP);\n\n    if (!match) {\n        return null;\n    }\n\n    return {\n        type: match[1],\n        id: match[2],\n    };\n}\n\n/**\n * Transform an account ID to it's API equivalent\n * @param {ResourceType} resourceType\n * @param {ResourceId}   resourceId\n * @memberOf api\n * @public\n */\nfunction toApiId(resourceType, resourceId) {\n    return base64url.encode(`${resourceType}:${resourceId}`);\n}\n\n/**\n * Create a query parameter error\n * @param {string} code      - Code of the error\n * @param {string} message   - Error message\n * @param {string} parameter - Name of the parameter concerned by the error\n * @param {*}      value     - Parameter value\n * @returns {QueryParameterError}\n */\nfunction toQueryParameterError({\n    code,\n    message,\n    parameter,\n    value,\n}) {\n    return {\n        code,\n        message,\n        parameter,\n        value: _.cloneDeep(value),\n    };\n}\n\n// ============================================================\n// Exports\nexport {\n    getInvalidApiIdList,\n    getResourceId,\n    getResourceType,\n    isValidApiId,\n    parsePublicId,\n    toApiId,\n    toQueryParameterError,\n};\n"],"file":"api.js"}