{"version":3,"sources":["http/request/errors/InvalidResourceTypeError.js"],"names":["InvalidResourceTypeError","parameter","message","expectedTypes","apiId","exptedTypes","RequestError"],"mappings":";;;;;;;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;;AACA;;;;IAIMA,wB;;;;;AACF;;;;;;AAMA,0CAKG;AAAA;;AAAA,QAJCC,SAID,QAJCA,SAID;AAAA,4BAHCC,OAGD;AAAA,QAHCA,OAGD,6BAHW,kDAGX;AAAA,kCAFCC,aAED;AAAA,QAFCA,aAED,mCAFiB,EAEjB;AAAA,QADCC,KACD,QADCA,KACD;;AAAA;;AACC,kGAAMH,SAAN,EAAiBC,OAAjB;AAEA,UAAKG,WAAL,GAAmB,OAAOF,aAAP,KAAyB,QAAzB,GACb,CAACA,aAAD,CADa,GAEbA,aAFN;AAIA,UAAKC,KAAL,GAAaA,KAAb;AAPD;AAQF;;;EApBkCE,yB,GAuBvC;AACA;;;eACeN,wB","sourcesContent":["// ============================================================\n// Import modules\nimport RequestError from './RequestError';\n\n// ============================================================\n// Error\n/**\n * @memberOf http.request.errors\n * @public\n */\nclass InvalidResourceTypeError extends RequestError {\n    /**\n     * @param {string}         parameter\n     * @param {string}         message\n     * @param {ResourceType[]} expectedTypes\n     * @param {string}         apiId\n     */\n    constructor({\n        parameter,\n        message = 'Invalid resource type or not a valid resource ID',\n        expectedTypes = [],\n        apiId,\n    }) {\n        super(parameter, message);\n\n        this.exptedTypes = typeof expectedTypes === 'string'\n            ? [expectedTypes]\n            : expectedTypes;\n\n        this.apiId = apiId;\n    }\n}\n\n// ============================================================\n// Exports\nexport default InvalidResourceTypeError;\n"],"file":"InvalidResourceTypeError.js"}