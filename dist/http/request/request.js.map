{"version":3,"sources":["http/request/request.js"],"names":["getOneDate","req","parameter","dateString","query","errors","date","error","httpErrors","InvalidParameterError","expectedType","value","getListFromReq","getListApiIdFromReq","expectedTypes","listId","createError","apiId","InvalidResourceTypeError","InvalidApiIdError","reduce","list","push"],"mappings":";;;;;;;;;AAEA;;AAIA;;AACA;;;;AAPA;AACA;AAQA;AACA;;AAEA;;;;;;;AAOA,SAASA,UAAT,CAAoBC,GAApB,EAAyBC,SAAzB,EAAoC;AAChC,MAAMC,UAAU,GAAGF,GAAG,CAACG,KAAJ,CAAUF,SAAV,CAAnB;;AAEA,MAAI,CAACC,UAAL,EAAiB;AACb,WAAO;AAAEE,MAAAA,MAAM,EAAE;AAAV,KAAP;AACH;;AAED,MAAMC,IAAI,GAAG,+BAAiBH,UAAjB,CAAb;;AAEA,MAAI,CAACG,IAAL,EAAW;AACP;AACA,QAAMC,KAAK,GAAG,IAAIC,UAAU,CAACC,qBAAf,CAAqC;AAC/CP,MAAAA,SAAS,EAATA,SAD+C;AAE/CQ,MAAAA,YAAY,EAAE,MAFiC;AAG/CC,MAAAA,KAAK,EAAER;AAHwC,KAArC,CAAd;AAMA,WAAO;AAAEE,MAAAA,MAAM,EAAE,CAACE,KAAD;AAAV,KAAP;AACH;;AAED,SAAO;AAAEI,IAAAA,KAAK,EAAEL,IAAT;AAAeD,IAAAA,MAAM,EAAE;AAAvB,GAAP;AACH;AAED;;;;;;;;AAMA,SAASO,cAAT,CAAwBX,GAAxB,EAA6BC,SAA7B,EAAwC;AACpC,SAAO,OAAOD,GAAG,CAACG,KAAJ,CAAUF,SAAV,CAAP,KAAgC,QAAhC,GACD,CAACD,GAAG,CAACG,KAAJ,CAAUF,SAAV,CAAD,CADC,GAEDD,GAAG,CAACG,KAAJ,CAAUF,SAAV,KAAwB,EAF9B;AAGH;AAED;;;;;;;;;AAOA,SAASW,mBAAT,CAA6BZ,GAA7B,EAAkCC,SAAlC,EAA6CY,aAA7C,EAA4D;AACxD,MAAMC,MAAM,GAAGH,cAAc,CAACX,GAAD,EAAMC,SAAN,CAA7B;AAEA,MAAMc,WAAW,GAAGF,aAAa,GAC3B,UAAAG,KAAK;AAAA,WAAI,IAAIT,UAAU,CAACU,wBAAf,CAAwC;AAC/ChB,MAAAA,SAAS,EAATA,SAD+C;AAE/CY,MAAAA,aAAa,EAAbA,aAF+C;AAG/CG,MAAAA,KAAK,EAALA;AAH+C,KAAxC,CAAJ;AAAA,GADsB,GAM3B,UAAAA,KAAK;AAAA,WAAI,IAAIT,UAAU,CAACW,iBAAf,CAAiC;AACxCjB,MAAAA,SAAS,EAATA,SADwC;AAExCe,MAAAA,KAAK,EAALA;AAFwC,KAAjC,CAAJ;AAAA,GANX,CAHwD,CAcxD;;AACA,SAAOF,MAAM,CAACK,MAAP,CAAc,gBAAmBH,KAAnB,EAA6B;AAAA,QAA1BI,IAA0B,QAA1BA,IAA0B;AAAA,QAApBhB,MAAoB,QAApBA,MAAoB;;AAC9C,QAAI,uBAAaY,KAAb,EAAoBH,aAApB,CAAJ,EAAwC;AACpCO,MAAAA,IAAI,CAACC,IAAL,CAAUL,KAAV;AACH,KAFD,MAGK;AACDZ,MAAAA,MAAM,CAACiB,IAAP,CAAYN,WAAW,CAACC,KAAD,CAAvB;AACH;;AAED,WAAO;AAAEI,MAAAA,IAAI,EAAJA,IAAF;AAAQhB,MAAAA,MAAM,EAANA;AAAR,KAAP;AACH,GATM,EASJ;AAAEM,IAAAA,KAAK,EAAE,EAAT;AAAaN,IAAAA,MAAM,EAAE;AAArB,GATI,CAAP;AAUH,C,CAED;AACA","sourcesContent":["// ============================================================\n// Import modules\nimport {\n    isValidApiId,\n} from '../../api';\n\nimport * as httpErrors from './errors';\nimport { toDateFromString } from '../../helpers';\n\n// ============================================================\n// Functions\n\n/**\n *\n * @param {Request} req\n * @param {string}  parameter\n * @returns {{value: Date?, errors: RequestError[]}}\n * @public\n */\nfunction getOneDate(req, parameter) {\n    const dateString = req.query[parameter];\n\n    if (!dateString) {\n        return { errors: [] };\n    }\n\n    const date = toDateFromString(dateString);\n\n    if (!date) {\n        /** @type {RequestError} */\n        const error = new httpErrors.InvalidParameterError({\n            parameter,\n            expectedType: 'Date',\n            value: dateString,\n        });\n\n        return { errors: [error] };\n    }\n\n    return { value: date, errors: [] };\n}\n\n/**\n *\n * @param {Request} req\n * @param {string}  parameter\n * @returns {string[]}\n */\nfunction getListFromReq(req, parameter) {\n    return typeof req.query[parameter] === 'string'\n        ? [req.query[parameter]]\n        : req.query[parameter] || [];\n}\n\n/**\n *\n * @param {Request}                     req\n * @param {string}                      parameter\n * @param {ResourceType|ResourceType[]} expectedTypes\n * @returns {{list: ApiId[], errors: RequestError[]}}\n */\nfunction getListApiIdFromReq(req, parameter, expectedTypes) {\n    const listId = getListFromReq(req, parameter);\n\n    const createError = expectedTypes\n        ? apiId => new httpErrors.InvalidResourceTypeError({\n            parameter,\n            expectedTypes,\n            apiId,\n        })\n        : apiId => new httpErrors.InvalidApiIdError({\n            parameter,\n            apiId,\n        });\n\n    // Returning the list and the errors\n    return listId.reduce(({ list, errors }, apiId) => {\n        if (isValidApiId(apiId, expectedTypes)) {\n            list.push(apiId);\n        }\n        else {\n            errors.push(createError(apiId));\n        }\n\n        return { list, errors };\n    }, { value: [], errors: [] });\n}\n\n// ============================================================\n// Exports\nexport {\n    getListApiIdFromReq,\n    getListFromReq,\n    getOneDate,\n};\n"],"file":"request.js"}